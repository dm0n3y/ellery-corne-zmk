/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>


#define AS(keycode) &as LS(keycode) keycode

/ {
    chosen {
        zmk,physical-layout = &foostan_corne_5col_layout;
    };

    behaviors {
        as: auto_shift {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping_term_ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";
        combo_cmd {
            timeout-ms = <40>;
            key-positions = <32 33>;
            bindings = <&sk LCMD>;
        };

        combo_ctrl {
            timeout-ms = <40>;
            key-positions = <31 34>;
            bindings = <&sk LCTRL>;
        };

        combo_alt {
            timeout-ms = <40>;
            key-positions = <30 35>;
            bindings = <&sk LALT>;
        };

        combo_cmd_shft {
            timeout-ms = <40>;
            key-positions = <32 29>;
            bindings = <&sk LCMD  &sk RSHIFT>;
        };

        combo_shft_cmd {
            timeout-ms = <40>;
            key-positions = <20 33>;
            bindings = <&sk LSHIFT  &sk RCMD >;
        };

        combo_cmd_ctrl {
            timeout-ms = <40>;
            key-positions = <32 34>;
            bindings = <&sk LCMD  &sk RCTRL>;
        };

        combo_ctrl_cmd {
            timeout-ms = <40>;
            key-positions = <31 33>;
            bindings = <&sk RCMD  &sk LCTRL>;
        };

        combo_cmd_alt {
            timeout-ms = <40>;
            key-positions = <32 35>;
            bindings = <&sk LCMD  &sk RALT >;
        };

        combo_alt_cmd {
            timeout-ms = <40>;
            key-positions = <30 33>;
            bindings = <&sk LALT  &sk RCMD >;
        };

        combo_ctrl_alt {
            timeout-ms = <40>;
            key-positions = <31 35>;
            bindings = <&sk LCTRL  &sk RALT>;
        };

        combo_alt_ctrl {
            timeout-ms = <40>;
            key-positions = <30 34>;
            bindings = <&sk LALT  &sk RCTRL>;
        };

        combo_ctrl_shft {
            timeout-ms = <40>;
            key-positions = <31 29>;
            bindings = <&sk LCTRL  &sk RSHIFT>;
        };

        combo_shft_ctrl {
            timeout-ms = <40>;
            key-positions = <20 34>;
            bindings = <&sk LSHIFT  &sk RCTRL>;
        };

        combo_alt_shft {
            timeout-ms = <40>;
            key-positions = <30 29>;
            bindings = <&sk LALT  &sk RSHIFT>;
        };

        combo_shft_alt {
            timeout-ms = <40>;
            key-positions = <20 35>;
            bindings = <&sk LSHIFT  &sk RALT>;
        };
    };

    macros {

        R_assign: R_assign {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&macro_tap &kp LT &kp MINUS>
                ;
        };
    };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  ' "   |  ,?  |  .- |  p  |  y  |     |  f  |  g   |  c   |  r   | l |
// |  a     |  o   |  e  |  u  |  i  |     |  d  |  h   |  t   |  n   | s | 
// |  ;  :  |  q   |  j  |  k  |  x  |     |  b  |  m   |  w   |  v   | z |
//             | GUI | LWR | SPC |     | ENT | RSE  | BSPC |
                        display-name = "dvorak";
                        bindings = <
   AS(SQT)          &mt  QMARK COMMA      &mt KP_MINUS KP_DOT  AS(P) AS(Y)         AS(F)   AS(G)  AS(C)     AS(R)     AS(L)
   AS(A)            AS(O)                 AS(E)                AS(U) AS(I)         AS(D)   AS(H)  AS(T)     AS(N)     AS(S)
   &mt LSHIFT SEMI  AS(Q)                 AS(J)                AS(K) AS(X)         AS(B)   AS(M)  AS(W)     AS(V)     &mt RSHIFT Z
                       &mt ESC LG(SPACE) &lt 4 LS(TAB)  &lt 3 SPACE         &lt 2 RET   &lt 5 TAB  &to 5
                        >;
                };

                qwerty {
// -----------------------------------------------------------------------------------------
// |  Q  |  W  |  E  |  R  |  T  |     |  Y  |  U   |  I   |  O   | P |
// |  A  |  S  |  D  |  F  |  G  |     |  H  |  J   |  t   |  n   | SQT | 
// |  Z  |  X  |  C  |  V  |  B  |     |  N  |  M   | CTRL | META | DOT |
//             | GUI | LWR | SPC |     | ENT | RSE  | BSPC |
                        display-name = "qwerty";
                        bindings = <
   AS(Q) AS(W) AS(E) AS(R) AS(T)     AS(Y)   AS(U)  AS(I)     AS(O)     AS(P)
   AS(A) AS(S) AS(D) AS(F) AS(G)     AS(H)   AS(J)  AS(K)     AS(L)     AS(SQT)
   AS(Z) AS(X) AS(C) AS(V) AS(B)     AS(N)   AS(M)  &kp LCTL  &kp RALT  AS(DOT)
        &kp LGUI &mo 1 &kp SPACE     AS(RET) &mo 2  &to 0
                        >;
                };



                nav {
// -----------------------------------------------------------------------------------------
// | 1! |  @none |  3# |  4$ |  5% |     |    |  BWD_D    |  UP    |  FWD_D  |    |
// | -_ |  =+ |  {  |  [  |  (  |     |    |  LEFT     |  DOWN  |  RIGHT  |    |
// | `~ |     |     |  ,< |  :  |     |    |    | CTRL| META h |      |
//            | GUI | ESC | SPC |     | ENT |     | TAB |
                        display-name = "nav";
                        bindings = <

   &kp LS(LEFT)  &kp LS(LEFT) &kp LS(RIGHT)  &kp LS(DOWN)  &kp LG(A)        &kp RG(Q)      &kp BACKSPACE   &kp  UP         &kp RC(D)       &kp RG(W)   
   &kp LG(LEFT)  &kp LA(LEFT) &kp RA(RIGHT)  &kp RG(RIGHT) &kp LG(F)        &kp RG(Z)      &kp LEFT        &kp DOWN        &kp RIGHT       &kp RG(RS(Z))
   &kp LG(LS(C)) &kp LG(X)    &kp LG(C)    &kp LG(V)       &kp LS(LG(V))    &kp RG(GRAVE)  &kp RG(TAB)     &sk RSHIFT   &kp RG(RS(TAB)) &kp RG(RS(GRAVE))
                            &sk LALT     &sk LCTRL     &sk LGUI             &trans   &trans    &trans
                        >;
                };

                sym {
// -----------------------------------------------------------------------------------------
// | 1! |  @none |  3# |  4$ |  5% |     |    |  BWD_D    |  UP    |  FWD_D  |    |
// | -_ |  =+ |  {  |  [  |  (  |     |    |  LEFT     |  DOWN  |  RIGHT  |    |
// | `~ |     |     |  ,< |  :  |     |    |    | CTRL| META h |      |
//            | GUI | ESC | SPC |     | ENT |     | TAB |
                        display-name = "symbol";
                        bindings = <
&kp LG(Q)      &kp BACKSPACE   &kp  UP         &kp LC(D)       &kp LG(W)        &mt KP_MINUS KP_PLUS           AS(LBKT)        AS(RBKT)      &kp UNDER         AS(BACKSLASH)    
&kp LG(Z)      &kp LEFT        &kp DOWN        &kp RIGHT       &kp LG(RS(Z))    &mt KP_SLASH KP_MULTIPLY       &kp LPAR         &kp RPAR      &mt &R_assign KP_EQUAL         AS(SLASH)
&kp LG(GRAVE)  &kp LG(TAB)     &sk LSHIFT   &kp LG(LS(TAB)) &kp LG(LS(GRAVE))   &mt CARET PERCENT              &kp LT           &kp GT        &mt AMPS DOLLAR            AS(GRAVE)  
                            &trans   &trans    &trans        &sk RGUI  &sk RCTRL &sk RALT
                        >;
                };

                num {
// -----------------------------------------------------------------------------------------
// | 1! |  @none |  3# |  4$ |  5% |        |    |  BWD_D    |  UP    |  FWD_D  |    |
// | -_ |  =+    |  {  |  [  |  (  |        |    |  LEFT     |  DOWN  |  RIGHT  |    |
// | `~ |        |     |  ,< |  :  |        |    |    | CTRL| META h |      |
//            | GUI | ESC | SPC |           | ENT |     | TAB |
                        display-name = "number";
                        bindings = <
&kp LG(Q)      &kp BACKSPACE   &kp  UP         &kp LC(D)       &kp LG(W)               &kp KP_MINUS       &kp KP_N7       &kp KP_N8       &kp KP_N9       &kp KP_SLASH    
&kp LG(Z)      &kp LEFT        &kp DOWN        &kp RIGHT       &kp LG(RS(Z))           &kp KP_PLUS        &kp KP_N4       &kp KP_N5       &kp KP_N6       &kp KP_MULTIPLY  
&kp LG(GRAVE)  &kp LG(TAB)     &sk LSHIFT   &kp LG(LS(TAB)) &kp LG(LS(GRAVE))          &kp KP_N0          &kp KP_N1       &kp KP_N2       &kp KP_N3       &kp KP_N0  
                                  &none     &none     &none          AS(RET)             &trans          &kp TAB
                        >;
                };



                function {
// -----------------------------------------------------------------------------------------
// | !     |  @  |  #  |  $  |  %  |     |  ^  |  &  |  *  |  (  |  )  |
// | BT1   | BT2 | BT3 | BT4 | BT5 |     | C_MUTE  | C_VOL_DN |  C_Vol_UP | C_BRI_DN | C_BRI_UP |  
// | BTCLR |     |     |     |     |     |  play   | prev     |  next     |          |          |
//               | GUI |     | SPC |     | ENT | ESC | TAB |
                        display-name = "function";
                        bindings = <
   &kp EXCL     &kp AT       &kp HASH     &kp DLLR     &kp PRCNT          &kp CARET &kp AMPS  &kp KP_MULTIPLY &kp LPAR  &kp RPAR
   &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4       &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP        &kp C_BRI_DN &kp C_BRI_UP 
   &bt BT_CLR   &trans       &trans       &trans       &trans             &kp C_PP    &kp C_PREV    &kp C_NEXT          &trans    &trans 
                             &kp LGUI     &trans       &kp LSHIFT         &kp RSHIFT  &to 6  &to 1
                        >;
                };

                mods {
// -----------------------------------------------------------------------------------------
// | !     |  @  |  #  |  $  |  %  |     |  ^  |  &  |  *  |  (  |  )  |
// | BT1   | BT2 | BT3 | BT4 | BT5 |     | C_MUTE  | C_VOL_DN |  C_Vol_UP | C_BRI_DN | C_BRI_UP |  
// | BTCLR |     |     |     |     |     |  play   | prev     |  next     |          |          |
//               | GUI |     | SPC |     | ENT | ESC | TAB |
                        display-name = "function";
                        bindings = <
   &trans   &trans   &trans   &trans   &trans      &trans   &trans   &trans   &trans   &trans
   &trans   &trans   &trans   &trans   &trans      &trans   &trans   &trans   &trans   &trans
   &trans   &trans   &trans   &trans   &trans      &trans   &trans   &trans   &trans   &trans
                  &sk LALT &sk LCTRL &sk LGUI      &sk RGUI &sk RSHIFT  &to 0
                        >;
                };

        };
};
